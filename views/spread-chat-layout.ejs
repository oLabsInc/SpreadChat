<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SpreadChat Video || WideSpread</title>
    <link rel="stylesheet" href="/style/spreadchat.css">

    <script src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.5.4/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.min.js"></script>


</head>
<body>

    <div class="container">
        <div id="myId"></div>

        <div class="local-video-container">
            <h2>Your Video</h2>
            <video id="localVideo" autoplay playsinline muted></video>
        </div>
        <div class="remote-video-container">
            <h2>Remote Video</h2>
            <video id="remoteVideo" autoplay playsinline></video>
        </div>


        <div class="call-controls">
            <div class="call-control">
                <button id="callButton">
                    <img src="/media/image/system/icon/phone/call.png" alt="Initiate Call Icon">
                </button>
            </div>
            <div class="call-control">
                <button id="hangUpButton">
                    <img src="/media/image/system/icon/phone/call-end.png" alt="End Call Icon">
                </button>
            </div>
        </div>

    </div>




    <script>
        const
            localVideo = document.getElementById('localVideo'),
            remoteVideo = document.getElementById('remoteVideo'),
            peer = new Peer(['1020']),
            socket = io()

        peer.on('open', (id) => {
            const myId = document.getElementById('myId')
            localPeerId = id
            myId.innerText = id
        })

        navigator.mediaDevices.getUserMedia({video: true, audio: true}).then((stream) => {
            localVideo.srcObject = stream
            localStream = stream

            peer.on('call', (call) => {
                call.answer(localStream)

                call.on('stream', (remoteStream) => {
                    remoteVideo.srcObject = remoteStream
                    myId.style.display = 'none'
                })

                document.getElementById('hangUpButton').disabled = false
            })

            document.getElementById('callButton').addEventListener('click', e => {
                const
                    remotePeerId = prompt('Enter ID of remote peer'),
                    call = peer.call(remotePeerId, localStream)

                call.on('stream', (remoteStream) => {
                    remoteVideo.srcObject = remoteStream
                    myId.style.display = 'none'
                })

                document.getElementById('hangUpButton').addEventListener('click', e => {
                    call.close()

                    document.getElementById('hangUpButton').disabled = true
                })
                document.getElementById('hangUpButton').disabled = false
            })

        }).catch((error) => {
            console.log(error)
        })



    </script>

</body>
</html>